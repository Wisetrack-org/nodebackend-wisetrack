const tableExists = async (tableName) => {
            const [tables] = await connection.execute(`SHOW TABLES LIKE '${tableName}'`);
            return tables.length > 0;
        };

// universities table
if (!await tableExists('Universities')) {
    await connection.execute(`
        CREATE TABLE Universities (
            university_id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL UNIQUE,
            email VARCHAR(100) NOT NULL,
            password VARCHAR(100) NOT NULL,
            location VARCHAR(100),
            established_year INT
        )
    `);
    console.log("Universities table created.");
} else {
    console.log("Universities table already exists.");
}
// student table
if (!await tableExists('Students')) {
    await connection.execute(`
        CREATE TABLE Students (
            student_id INT AUTO_INCREMENT PRIMARY KEY,
            first_name VARCHAR(50) NOT NULL,
            last_name VARCHAR(50) NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            password VARCHAR(100) NOT NULL,
            date_of_birth DATE NOT NULL,
            enrollment_date DATE NOT NULL,
            university_id INT,
            FOREIGN KEY (university_id) REFERENCES Universities(university_id)
        )
    `);
    console.log("Students table created.");
} else {
    console.log("Students table already exists.");
}

// teacher table
if (!await tableExists('Teachers')) {
    await connection.execute(`
        CREATE TABLE Teachers (
            teacher_id INT AUTO_INCREMENT PRIMARY KEY,
            first_name VARCHAR(50) NOT NULL,
            last_name VARCHAR(50) NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            password VARCHAR(100) NOT NULL,
            subject VARCHAR(100),
            hire_date DATE NOT NULL,
            university_id INT,
            FOREIGN KEY (university_id) REFERENCES Universities(university_id)
        )
    `);
    console.log("Teachers table created.");
} else {
    console.log("Teachers table already exists.");
}

 if (!(await tableExists("TeacherClasses"))) {
      await connection.execute(`CREATE TABLE TeacherClasses (
  assignment_id INT PRIMARY KEY AUTO_INCREMENT,
  teacher_id INT NOT NULL,
  class_id INT NOT NULL,
  academic_year YEAR NOT NULL,
  branch VARCHAR(50) NOT NULL,
  FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id),
  FOREIGN KEY (class_id) REFERENCES Classes(class_id),
  UNIQUE KEY unique_assignment (teacher_id, class_id, academic_year)
);`);
    }

if (!(await tableExists("Universities"))) {
      await connection.execute(`
        CREATE TABLE Universities (
            university_id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL UNIQUE,
            email VARCHAR(100) NOT NULL,
            password VARCHAR(100) NOT NULL,
            location VARCHAR(100),
            established_year INT
        )
      `);
      console.log("Universities table created.");
    }

    // âœ… Students Table (Depends on Universities)
    if (!(await tableExists("Students"))) {
      await connection.execute(`
        CREATE TABLE Students (
            student_id INT AUTO_INCREMENT PRIMARY KEY,
            first_name VARCHAR(50) NOT NULL,
            last_name VARCHAR(50) NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            password VARCHAR(100) NOT NULL,
            date_of_birth DATE NOT NULL,
            enrollment_date DATE NOT NULL,
            university_id INT,
            FOREIGN KEY (university_id) REFERENCES Universities(university_id) ON DELETE CASCADE
        )
      `);
      console.log("Students table created.");
    }

    if (!(await tableExists("Teachers"))) {
      await connection.execute(`
        CREATE TABLE Teachers (
            teacher_id INT AUTO_INCREMENT PRIMARY KEY,
            first_name VARCHAR(50) NOT NULL,
            last_name VARCHAR(50) NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            password VARCHAR(100) NOT NULL,
            subject VARCHAR(100),
            hire_date DATE NOT NULL,
            university_id INT,
            FOREIGN KEY (university_id) REFERENCES Universities(university_id) ON DELETE CASCADE
        )
      `);
      console.log("Teachers table created.");
    }

    if (!(await tableExists("Classes"))) {
      await connection.execute(`
        CREATE TABLE Classes (
            class_id INT AUTO_INCREMENT PRIMARY KEY,
            class_name VARCHAR(100) NOT NULL,
            academic_year YEAR NOT NULL,
            branch VARCHAR(100) NOT NULL,
            university_id INT,
            FOREIGN KEY (university_id) REFERENCES Universities(university_id) ON DELETE CASCADE
        )
      `);
      console.log("Classes table created.");
    }

    if (!(await tableExists("Subjects"))) {
      await connection.execute(`
        CREATE TABLE Subjects (
            subject_id INT AUTO_INCREMENT PRIMARY KEY,
            subject_name VARCHAR(100) NOT NULL,
            semester INT NOT NULL,
            class_id INT,
            teacher_id INT,
            FOREIGN KEY (class_id) REFERENCES Classes(class_id) ON DELETE CASCADE,
            FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id) ON DELETE SET NULL
        )
      `);
      console.log("Subjects table created.");
    }

    if (!(await tableExists("StudentSubjects"))) {
      await connection.execute(`
        ALTER TABLE Students 
        ADD COLUMN class_id INT,
        ADD COLUMN semester INT,
        ADD FOREIGN KEY (class_id) REFERENCES Classes(class_id) ON DELETE CASCADE
      `);
      console.log("Students table updated (added class_id and semester).");
    }

    if (!(await tableExists("StudentSubjects"))) {
      await connection.execute(`
        CREATE TABLE StudentSubjects (
            student_id INT,
            subject_id INT,
            semester INT NOT NULL,
            PRIMARY KEY (student_id, subject_id, semester),
            FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE,
            FOREIGN KEY (subject_id) REFERENCES Subjects(subject_id) ON DELETE CASCADE
        )
      `);
      console.log("StudentSubjects table created.");
    }

    if (!(await tableExists("Attendance"))) {
      await connection.execute(`
        CREATE TABLE Attendance (
            attendance_id INT AUTO_INCREMENT PRIMARY KEY,
            student_id INT,
            subject_id INT,
            semester INT NOT NULL,
            date DATE NOT NULL,
            status ENUM('Present','Absent') NOT NULL,
            FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE,
            FOREIGN KEY (subject_id) REFERENCES Subjects(subject_id) ON DELETE CASCADE
        )
      `);
      console.log("Attendance table created.");
    }

    if (!(await tableExists("Parents"))) {
      await connection.execute(`
        CREATE TABLE Parents (
            parent_id INT AUTO_INCREMENT PRIMARY KEY,
            student_id INT NOT NULL,
            first_name VARCHAR(50) NOT NULL,
            last_name VARCHAR(50) NOT NULL,
            email VARCHAR(100) UNIQUE,
            phone VARCHAR(20),
            FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE
        )
      `);
      console.log("Parents table created.");
    }


    const tableExists = async (tableName) => {
      const [tables] = await connection.execute(
        `SHOW TABLES LIKE '${tableName}'`
      );
      return tables.length > 0;
    };

    await connection.beginTransaction(); // Start a transaction

    await connection.execute(`SET FOREIGN_KEY_CHECKS = 0;`);
    await connection.execute(`DROP TABLE IF EXISTS Attendance;`);
    await connection.execute(`DROP TABLE IF EXISTS StudentSubjects;`);
    await connection.execute(`DROP TABLE IF EXISTS Parents;`);
    await connection.execute(`DROP TABLE IF EXISTS Subjects;`);
    await connection.execute(`DROP TABLE IF EXISTS Students;`);
    await connection.execute(`DROP TABLE IF EXISTS Teachers;`);
    await connection.execute(`DROP TABLE IF EXISTS Classes;`);
    await connection.execute(`DROP TABLE IF EXISTS Universities;`);    await connection.execute(`SET FOREIGN_KEY_CHECKS = 1;`);

    await connection.commit();